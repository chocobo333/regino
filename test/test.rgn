
![link: "arith.ll"]
![link: "io.ll"]
![link: "int.ll"]
![link: "string.ll"]


# const
#     ptr ![builtin: "ptr"]
# ptr[T <: Default] = block:
#     let a: T = default()
#     typeof(pointerof(a))
# ptr[T, n: int] = typeof(malloc[T](n))
# ref[T] = ptr[T, 1]
# seq[T] =  ([size: int], len: int, p: ptr[T, size])
# string = seq[char]
# func ptrGet[T, n: int](self: ptr[T, n], m: int) -> T ![builtin: "ptrGet"]
# func `[]`[T](self: seq[T], n: int) -> T:
#     self.p.ptrGet(n)
# cstring = typeof("")

# const
#    bool = typeof(false)
const
    int = typeof(0)
    int32 = typeof(0'i32)
    float = typeof(0.0)
    string = typeof("")
    char = typeof('a')
    pairWithInt[T] = (int, T)
    pair[T, U] = (T, U)
# func pairWithInt[T]() -> Type:
#     (int, T)
#    a = (3, "f")
# const
#     seq[T] ![builtin: "seq"]
# seq: (T: Type) -> seq[T]

func two() -> int:
    2
func `three?`() -> int:
    two()
const
    one = 1
    two = two()
    three = `three?`()
    hello_world = "Hello, world!"

func id[T](a: T) -> T:
    a
const
    four = id 4
    five = id[int](5)
func swap[T, U]((a, b): (T, U)) -> (U, T):
    (b, a)
# func f(a: bool) -> bool:
#    a
func `add@int32/int32int32`(a: int, b: int) -> int ![importll]
func `sub@int32/int32int32`(a: int, b: int) -> int ![importll]
# func `eq@bool/int32int32`(a: int, b: int) -> bool ![importll]
func `+`(a: int, b: int) -> int:
    `add@int32/int32int32`(a, b)
func `-`(a: int, b: int) -> int:
    `sub@int32/int32int32`(a, b)
# func `==`(a: int, b: int) -> bool:
#     `eq@bool/int32int32`(a, b)

func `tos@string/i32`(a: int) -> string ![importll]
func `$`(a: int) -> string ![subtype]:
    `tos@string/i32`(a)
func `$`(a: float) -> string ![subtype]:
    "float"
func `$`[T <: string, U <: string]((a, b): (T, U)) -> string:
    let a: string = a
    a

# func toInt(a: bool) -> int ![subtype]:
#     if a:
#         1
#     else:
#         0
# func `$`(a: bool) -> string ![subtype]:
#     if a:
#         "true"
#     else:
#         "false"
func echo(a: string) ![importll]
func len(a: string) -> int ![importll]

# func fib(n: int) -> int:
#     if n == 0:
#         1
#     elif n == 1:
#         1
#     else:
#         fib(n-1) + fib(n-2)

let
    a = (2, 2.0)
    b = 3
let b = swap(a)
let b = swap(b)
echo hello_world
echo one
echo two
echo id three
echo id[int](4)
echo five
echo id[string]("ff")
let a: pairWithInt[float] = (3, 4.0)
echo $a
let b: pair[float, float] = (3., 4.0)
echo $b
0