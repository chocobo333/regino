
![link: "arith.ll"]
![link: "io.ll"]
![link: "int.ll"]
![link: "float.ll"]
![link: "string.ll"]

import builtin


# const
#     ptr[T, n: int] = typeof(malloc[T, n]())
#     ref[T] = ptr[T, 1]
#     seq[T] =  ([size: int], len: int, p: ptr[T, size])
#     string = seq[char]
# func ptrGet[T, n: int](self: ptr[T, n], m: int) -> T ![builtin: "ptrGet"]
# func ptrSet[T, n: int](self: ptr[T, n], m: int, val: T) -> T ![builtin: "ptrSet"]
# func `[]`[T](self: seq[T], n: int) -> T:
#     self.p.ptrGet[T](n)
# func `[]=`[T](self: seq[T], n: int, val: T) ![builtin: "ptrSet"]:
#     self.p.ptrSet[T](n, val)
# cstring = typeof("")
# func ptrGet[T](self: ptr[T], n: int) -> T ![builtin: "ptrGet"]
# func ptrSet[T](self: ptr[T], n: int, val: T) -> T ![builtin: "ptrSet"]


# type
#     Magma = trait (T, op): ([T], func(T, T) -> T)
#     Magma = trait (T, op): (Type, func(T, T) -> T)
#     SemiGroup = trait (T, op): (Type, func(T, T) -> T) with
#         prop associtive(x, y, z: T) -> op(x, op(y, z)) == op(op(x, y), z)
#     Monoid = trait (T, op): (Type, func(T, T) -> T) with
#         (T, op) is SemiGroup
#         func unit(_: singleton (T, op)) -> T
#         prop unitNeutral(x: T) -> (op((T, op).unit, x) == x, op(x, (T, op).unit) == x)
#     Group = trait (T, op): (Type, func(T, T) -> T) with
#         (T, op) is Monoid
#         func inverse(_: T) -> T
#         prop invNeutral(x: T) -> (op(x, x.inverse()) == (T, op).unit(), op(x.inverse(), x) == (T, op).unit())
# seq[T] = (p: ptr T, len: int, size: int)

type
    pairWithInt[T] = (int, T)
    pair[T, U] = (T, U)

    Vector2 = object
        x: float
        y: float

    Shape = variant
        Empty
        Point(Vector2)
        Rectangle(p: Vector2, w: int, h: int)
# Nat = ref variant
#     Zero
#     Succ(Nat)
# List[T] = ref variant
#     Nil
#     Cons(head: T, tail: List[T])

# func sum(l: List[int]) -> int:
#     case l
#     of Nil:
#         0
#     of Cons(head, tail):
#         head + sum(tail)

func id[T](a: T) -> T:
    ## identity function
    a
func swap[T, U]((a, b): (T, U)) -> (U, T):
    (b, a)

func `$`[T <: string, U <: string]((a, b): (T, U)) -> string:
    let a: string = a
    a

func fib(n: int) -> int:
    if n == 0:
        1
    elif n == 1:
        1
    else:
        fib(n-1) + fib(n-2)
func newVector2(x: float, y: float) -> Vector2:
    Vector2(x: x, y: y)
func `$`(self: Vector2) -> string ![subtype]:
    "vector2"
let a = newVector2(3, 5)
echo $a
let
    (x, y) = (a.x, a.y)
echo $x
echo $y
func `$`(self: Shape) -> string:
    "shape"
let s = Empty
let a = Point(a)
echo $s
echo $a
0
