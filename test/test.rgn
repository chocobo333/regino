
![link: "arith.ll"]
![link: "io.ll"]
![link: "int.ll"]
![link: "string.ll"]


# const
#     ptr[T, n: int] = typeof(malloc[T, n]())
#     ref[T] = ptr[T, 1]
#     seq[T] =  ([size: int], len: int, p: ptr[T, size])
#     string = seq[char]
# func ptrGet[T, n: int](self: ptr[T, n], m: int) -> T ![builtin: "ptrGet"]
# func ptrSet[T, n: int](self: ptr[T, n], m: int, val: T) -> T ![builtin: "ptrGet"]
# func `[]`[T](self: seq[T], n: int) -> T:
#     self.p.ptrGet[T](n)
# func `[]=`[T](self: seq[T], n: int, val: T) ![builtin: "ptrSet"]:
#     self.p.ptrSet[T](n, val)
# cstring = typeof("")
const
    ptr[T] = typeof(malloc(T, 1))
# func ptrGet[T](self: ptr[T], n: int) -> T ![builtin: "ptrGet"]
# func ptrSet[T](self: ptr[T], n: int, val: T) -> T ![builtin: "ptrSet"]
# const
#     ref[T] = distinct ptr[T]
#     seq[T] = (size: int, len: int, p: ptr[T])
#     Monoid = (_, op): ([T], (T, T) -> T) with
#         func unit(_: singleton (T, op)) -> T
#         prop unitNeutral(x: T) -> (op((T, op).unit, x) == x, op(x, (T, op).unit) == x)
#         prop associtive(x, y, z: T) -> op(x, op(y, z)) == op(op(x, y), z)

# const
#    bool = typeof(false)
const
    int = typeof(0)
    int32 = typeof(0'i32)
    float = typeof(0.0)
    string = typeof("")
    char = typeof('a')
    pairWithInt[T] = (int, T)
    pair[T, U] = (T, U)

func id[T](a: T) -> T:
    a
func swap[T, U]((a, b): (T, U)) -> (U, T):
    (b, a)

func `add@int32/int32int32`(a: int, b: int) -> int ![importll]
func `sub@int32/int32int32`(a: int, b: int) -> int ![importll]
# func `eq@bool/int32int32`(a: int, b: int) -> bool ![importll]
func `+`(a: int, b: int) -> int:
    `add@int32/int32int32`(a, b)
func `-`(a: int, b: int) -> int:
    `sub@int32/int32int32`(a, b)
# func `==`(a: int, b: int) -> bool:
#     `eq@bool/int32int32`(a, b)

func `tos@string/i32`(a: int) -> string ![importll]
func `$`(a: int) -> string ![subtype]:
    `tos@string/i32`(a)
func `$`(a: float) -> string ![subtype]:
    "float"
func `$`[T <: string, U <: string]((a, b): (T, U)) -> string:
    let a: string = a
    a

# func toInt(a: bool) -> int ![subtype]:
#     if a:
#         1
#     else:
#         0
# func `$`(a: bool) -> string ![subtype]:
#     if a:
#         "true"
#     else:
#         "false"
func echo(a: string) ![importll]
func len(a: string) -> int ![importll]

# func fib(n: int) -> int:
#     if n == 0:
#         1
#     elif n == 1:
#         1
#     else:
#         fib(n-1) + fib(n-2)

echo "Hello world!"
let a = malloc(int, 3)
let c: pairWithInt[int] = (3, 3)
let b: ptr[int] = malloc(int, 3)
0