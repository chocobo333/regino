
![link: "arith.ll"]
![link: "io.ll"]
![link: "int.ll"]
![link: "string.ll"]


#const
#    bool = typeof(false)
const
    int = typeof(0)
    float = typeof(0.0)
    string = typeof("")
#    a = (3, "f")


func id[T](a: T) -> T:
    a
func swap[T, U](a: (T, U)) -> (U, T):
    let (a, b) = a
    (b, a)
# func f(a: bool) -> bool:
#    a
func `add@int32/int32int32`(a: int, b: int) -> int ![importll]
func `sub@int32/int32int32`(a: int, b: int) -> int ![importll]
# func `eq@bool/int32int32`(a: int, b: int) -> bool ![importll]
func `+`(a: int, b: int) -> int:
    `add@int32/int32int32`(a, b)
func `-`(a: int, b: int) -> int:
    `sub@int32/int32int32`(a, b)
# func `==`(a: int, b: int) -> bool:
#     `eq@bool/int32int32`(a, b)

func `tos@string/i32`(a: int) -> string ![importll]
func `$`(a: int) -> string ![subtype]:
    `tos@string/i32`(a)
func `$`(a: float) -> string ![subtype]:
    "float"
func `$`[T <: string, U <: string](a: (T, U)) -> string:
    let (a, b) = a
    let a: string = a
    a

# func toInt(a: bool) -> int ![subtype]:
#     if a:
#         1
#     else:
#         0
# func `$`(a: bool) -> string ![subtype]:
#     if a:
#         "true"
#     else:
#         "false"
func echo(a: string) ![importll]
func len(a: string) -> int ![importll]

# func fib(n: int) -> int:
#     if n == 0:
#         1
#     elif n == 1:
#         1
#     else:
#         fib(n-1) + fib(n-2)

let a = (1, 2.0)
echo $a
let b = swap(a)
echo $b
let b = swap(b)
echo $b
0